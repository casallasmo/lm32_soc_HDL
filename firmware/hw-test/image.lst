
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000005dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  000005dc  000005dc  00000630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000208  000005e0  000005e0  00000634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000007e8  000007e8  0000083c  2**2
                  ALLOC
  4 .debug_abbrev 00000298  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000716  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000419  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000016b  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001bd  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000081  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000026c  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 83 	calli 2d8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 f0 	ori gp,gp,0x7f0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 e8 	ori r1,r1,0x7e8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 6c 	ori r3,r3,0x86c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 50 	calli 27c <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <spi_lcd_putchar>:
 ,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ←
 ,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f →
 };

 void spi_lcd_putchar(char *c)
 {
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
 220:	78 0c 00 00 	mvhi r12,0x0
 224:	b8 20 70 00 	mv r14,r1

 	int i;
   for (i = 0; i < 5; i++)
 228:	34 0b 00 00 	mvi r11,0
 22c:	39 8c 05 e0 	ori r12,r12,0x5e0
 230:	34 0d 00 05 	mvi r13,5
   {
     spi_sendbyte(ASCII[c[0]-32][i], 1);
 234:	41 c3 00 00 	lbu r3,(r14+0)
 238:	34 02 00 01 	mvi r2,1
 23c:	34 63 ff e0 	addi r3,r3,-32
 240:	3c 64 00 02 	sli r4,r3,2
 244:	b4 83 18 00 	add r3,r4,r3
 248:	b4 6b 18 00 	add r3,r3,r11
 24c:	b5 83 18 00 	add r3,r12,r3
 250:	40 61 00 00 	lbu r1,(r3+0)

 void spi_lcd_putchar(char *c)
 {

 	int i;
   for (i = 0; i < 5; i++)
 254:	35 6b 00 01 	addi r11,r11,1
   {
     spi_sendbyte(ASCII[c[0]-32][i], 1);
 258:	f8 00 00 9c 	calli 4c8 <spi_sendbyte>

 void spi_lcd_putchar(char *c)
 {

 	int i;
   for (i = 0; i < 5; i++)
 25c:	5d 6d ff f6 	bne r11,r13,234 <spi_lcd_putchar+0x2c>
   {
     spi_sendbyte(ASCII[c[0]-32][i], 1);
   }
   // spi_sendbyte(0x00, 1);
 }
 260:	2b 9d 00 04 	lw ra,(sp+4)
 264:	2b 8b 00 14 	lw r11,(sp+20)
 268:	2b 8c 00 10 	lw r12,(sp+16)
 26c:	2b 8d 00 0c 	lw r13,(sp+12)
 270:	2b 8e 00 08 	lw r14,(sp+8)
 274:	37 9c 00 14 	addi sp,sp,20
 278:	c3 a0 00 00 	ret

0000027c <main>:

int main()
{
 27c:	37 9c ff f8 	addi sp,sp,-8
 280:	5b 9d 00 04 	sw (sp+4),ra

	spi_lcd_init();
 284:	f8 00 00 ae 	calli 53c <spi_lcd_init>
    char test[] = "a";
    char *z;
    z = test;
	spi_lcd_putchar(z);
 288:	37 81 00 08 	addi r1,sp,8

int main()
{

	spi_lcd_init();
    char test[] = "a";
 28c:	34 02 61 00 	mvi r2,24832
 290:	0f 82 00 08 	sh (sp+8),r2
    char *z;
    z = test;
	spi_lcd_putchar(z);
 294:	fb ff ff dd 	calli 208 <spi_lcd_putchar>
	uart_putchar(uart_getchar());
	}

	*/
	return 0;
}
 298:	34 01 00 00 	mvi r1,0
 29c:	2b 9d 00 04 	lw ra,(sp+4)
 2a0:	37 9c 00 08 	addi sp,sp,8
 2a4:	c3 a0 00 00 	ret

000002a8 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2a8:	c3 a0 00 00 	ret

000002ac <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2ac:	78 01 00 00 	mvhi r1,0x0
 2b0:	38 21 08 68 	ori r1,r1,0x868
 2b4:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2b8:	78 02 00 00 	mvhi r2,0x0
 2bc:	38 42 07 d8 	ori r2,r2,0x7d8
 2c0:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2c4:	34 63 00 01 	addi r3,r3,1
 2c8:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2cc:	34 01 00 0e 	mvi r1,14
 2d0:	58 41 00 00 	sw (r2+0),r1
}
 2d4:	c3 a0 00 00 	ret

000002d8 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2d8:	37 9c ff f0 	addi sp,sp,-16
 2dc:	5b 8b 00 10 	sw (sp+16),r11
 2e0:	5b 8c 00 0c 	sw (sp+12),r12
 2e4:	5b 8d 00 08 	sw (sp+8),r13
 2e8:	5b 9d 00 04 	sw (sp+4),ra
 2ec:	78 0b 00 00 	mvhi r11,0x0
 2f0:	39 6b 07 e8 	ori r11,r11,0x7e8
 2f4:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2f8:	35 6d 00 80 	addi r13,r11,128
 2fc:	e0 00 00 04 	bi 30c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 300:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 304:	45 6d 00 08 	be r11,r13,324 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 308:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 30c:	21 81 00 01 	andi r1,r12,0x1
 310:	44 20 ff fc 	be r1,r0,300 <irq_handler+0x28>
 314:	29 61 00 00 	lw r1,(r11+0)
 318:	35 6b 00 04 	addi r11,r11,4
 31c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 320:	5d 6d ff fa 	bne r11,r13,308 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 324:	2b 9d 00 04 	lw ra,(sp+4)
 328:	2b 8b 00 10 	lw r11,(sp+16)
 32c:	2b 8c 00 0c 	lw r12,(sp+12)
 330:	2b 8d 00 08 	lw r13,(sp+8)
 334:	37 9c 00 10 	addi sp,sp,16
 338:	c3 a0 00 00 	ret

0000033c <isr_init>:

void isr_init()
{
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	78 02 00 00 	mvhi r2,0x0
 344:	38 21 07 e8 	ori r1,r1,0x7e8
 348:	38 42 02 a8 	ori r2,r2,0x2a8
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 34c:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 350:	58 22 00 00 	sw (r1+0),r2
 354:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 358:	5c 23 ff fe 	bne r1,r3,350 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 35c:	c3 a0 00 00 	ret

00000360 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 360:	78 03 00 00 	mvhi r3,0x0
 364:	3c 21 00 02 	sli r1,r1,2
 368:	38 63 07 e8 	ori r3,r3,0x7e8
 36c:	b4 61 18 00 	add r3,r3,r1
 370:	58 62 00 00 	sw (r3+0),r2
}
 374:	c3 a0 00 00 	ret

00000378 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 378:	78 03 00 00 	mvhi r3,0x0
 37c:	3c 21 00 02 	sli r1,r1,2
 380:	38 63 07 e8 	ori r3,r3,0x7e8
 384:	78 02 00 00 	mvhi r2,0x0
 388:	b4 61 18 00 	add r3,r3,r1
 38c:	38 42 02 a8 	ori r2,r2,0x2a8
 390:	58 62 00 00 	sw (r3+0),r2
}
 394:	c3 a0 00 00 	ret

00000398 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 398:	78 04 00 00 	mvhi r4,0x0
 39c:	38 84 05 dc 	ori r4,r4,0x5dc
 3a0:	28 83 00 00 	lw r3,(r4+0)
 3a4:	78 02 00 00 	mvhi r2,0x0
 3a8:	38 42 07 d8 	ori r2,r2,0x7d8
 3ac:	28 42 00 00 	lw r2,(r2+0)
 3b0:	88 23 08 00 	mul r1,r1,r3
 3b4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3b8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3bc:	34 01 00 08 	mvi r1,8
 3c0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3c4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3c8:	20 21 00 01 	andi r1,r1,0x1
 3cc:	44 20 ff fe 	be r1,r0,3c4 <msleep+0x2c>
}
 3d0:	c3 a0 00 00 	ret

000003d4 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3d4:	78 02 00 00 	mvhi r2,0x0
 3d8:	38 42 07 d8 	ori r2,r2,0x7d8
 3dc:	28 42 00 00 	lw r2,(r2+0)
 3e0:	08 21 00 64 	muli r1,r1,100
 3e4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3e8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3ec:	34 01 00 08 	mvi r1,8
 3f0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3f4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3f8:	20 21 00 01 	andi r1,r1,0x1
 3fc:	44 20 ff fe 	be r1,r0,3f4 <nsleep+0x20>
}
 400:	c3 a0 00 00 	ret

00000404 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 404:	78 01 00 00 	mvhi r1,0x0
 408:	38 21 07 d8 	ori r1,r1,0x7d8
 40c:	28 23 00 00 	lw r3,(r1+0)
 410:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 414:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 418:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 41c:	38 21 08 68 	ori r1,r1,0x868

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 420:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 424:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 430:	34 04 00 0e 	mvi r4,14
 434:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 438:	38 21 07 e8 	ori r1,r1,0x7e8
 43c:	38 42 02 ac 	ori r2,r2,0x2ac
 440:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 444:	c3 a0 00 00 	ret

00000448 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 448:	c3 a0 00 00 	ret

0000044c <uart_getchar>:

char uart_getchar()
{
 44c:	78 01 00 00 	mvhi r1,0x0
 450:	38 21 07 d4 	ori r1,r1,0x7d4
 454:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 458:	28 41 00 00 	lw r1,(r2+0)
 45c:	20 21 00 01 	andi r1,r1,0x1
 460:	44 20 ff fe 	be r1,r0,458 <uart_getchar+0xc>
	return uart0->rxtx;
 464:	28 41 00 04 	lw r1,(r2+4)
}
 468:	20 21 00 ff 	andi r1,r1,0xff
 46c:	c3 a0 00 00 	ret

00000470 <uart_putchar>:

void uart_putchar(char c)
{
 470:	78 02 00 00 	mvhi r2,0x0
 474:	38 42 07 d4 	ori r2,r2,0x7d4
 478:	28 43 00 00 	lw r3,(r2+0)
 47c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 480:	28 62 00 00 	lw r2,(r3+0)
 484:	20 42 00 10 	andi r2,r2,0x10
 488:	5c 40 ff fe 	bne r2,r0,480 <uart_putchar+0x10>
	uart0->rxtx = c;
 48c:	58 61 00 04 	sw (r3+4),r1
}
 490:	c3 a0 00 00 	ret

00000494 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 494:	40 24 00 00 	lbu r4,(r1+0)
 498:	44 80 00 0b 	be r4,r0,4c4 <uart_putstr+0x30>
 49c:	78 02 00 00 	mvhi r2,0x0
 4a0:	38 42 07 d4 	ori r2,r2,0x7d4
 4a4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4a8:	28 62 00 00 	lw r2,(r3+0)
 4ac:	20 42 00 10 	andi r2,r2,0x10
 4b0:	5c 40 ff fe 	bne r2,r0,4a8 <uart_putstr+0x14>
	uart0->rxtx = c;
 4b4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4b8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4bc:	40 24 00 00 	lbu r4,(r1+0)
 4c0:	5c 82 ff fa 	bne r4,r2,4a8 <uart_putstr+0x14>
 4c4:	c3 a0 00 00 	ret

000004c8 <spi_sendbyte>:



// ok, it's working as it should
void spi_sendbyte(uint8_t c, uint8_t d_c)
{
 4c8:	78 03 00 00 	mvhi r3,0x0
 4cc:	38 63 07 e0 	ori r3,r3,0x7e0
 4d0:	28 64 00 00 	lw r4,(r3+0)
 4d4:	20 21 00 ff 	andi r1,r1,0xff
 4d8:	20 42 00 ff 	andi r2,r2,0xff
	while (!(spi0->rst_done & SPI_RST_DONE) || (spi0->state)) ;
 4dc:	28 83 00 00 	lw r3,(r4+0)
 4e0:	20 63 00 01 	andi r3,r3,0x1
 4e4:	44 60 ff fe 	be r3,r0,4dc <spi_sendbyte+0x14>
 4e8:	28 83 00 1c 	lw r3,(r4+28)
 4ec:	5c 60 ff fc 	bne r3,r0,4dc <spi_sendbyte+0x14>
	// todo cambiar a un solo registro
	spi0->divisor = 0xFF;
 4f0:	34 03 00 ff 	mvi r3,255
 4f4:	58 83 00 18 	sw (r4+24),r3
	spi0->spi_cs = 0;
 4f8:	58 80 00 14 	sw (r4+20),r0
	spi0->dc = d_c;
 4fc:	58 82 00 04 	sw (r4+4),r2
	spi0->rxtx = c;
 500:	58 81 00 08 	sw (r4+8),r1
}
 504:	c3 a0 00 00 	ret

00000508 <spi_lcd_blank>:



// ok, it's working as it should
void spi_lcd_blank(void)
{
 508:	37 9c ff f8 	addi sp,sp,-8
 50c:	5b 8b 00 08 	sw (sp+8),r11
 510:	5b 9d 00 04 	sw (sp+4),ra
 514:	34 0b 01 f8 	mvi r11,504
	int i;
  for ( i = 0; i < 504; i++)
  {
    spi_sendbyte(0x00, 1);
 518:	35 6b ff ff 	addi r11,r11,-1
 51c:	34 01 00 00 	mvi r1,0
 520:	34 02 00 01 	mvi r2,1
 524:	fb ff ff e9 	calli 4c8 <spi_sendbyte>

// ok, it's working as it should
void spi_lcd_blank(void)
{
	int i;
  for ( i = 0; i < 504; i++)
 528:	5d 60 ff fc 	bne r11,r0,518 <spi_lcd_blank+0x10>
  {
    spi_sendbyte(0x00, 1);
  }
}
 52c:	2b 9d 00 04 	lw ra,(sp+4)
 530:	2b 8b 00 08 	lw r11,(sp+8)
 534:	37 9c 00 08 	addi sp,sp,8
 538:	c3 a0 00 00 	ret

0000053c <spi_lcd_init>:

// ok, it's working as it should
void spi_lcd_init(void)
{
 53c:	37 9c ff fc 	addi sp,sp,-4
 540:	5b 9d 00 04 	sw (sp+4),ra
	spi_sendbyte(EXTENDED_ISET,0);
 544:	34 01 00 21 	mvi r1,33
 548:	34 02 00 00 	mvi r2,0
 54c:	fb ff ff df 	calli 4c8 <spi_sendbyte>
	spi_sendbyte(BIAS_VAL,0);
 550:	34 01 00 14 	mvi r1,20
 554:	34 02 00 00 	mvi r2,0
 558:	fb ff ff dc 	calli 4c8 <spi_sendbyte>
	spi_sendbyte(CONTRAST_VAL,0);
 55c:	34 01 00 bf 	mvi r1,191
 560:	34 02 00 00 	mvi r2,0
 564:	fb ff ff d9 	calli 4c8 <spi_sendbyte>
	spi_sendbyte(BASIC_ISET,0);
 568:	34 01 00 20 	mvi r1,32
 56c:	34 02 00 00 	mvi r2,0
 570:	fb ff ff d6 	calli 4c8 <spi_sendbyte>
	spi_sendbyte(NORMAL_MODE,0);
 574:	34 01 00 0c 	mvi r1,12
 578:	34 02 00 00 	mvi r2,0
 57c:	fb ff ff d3 	calli 4c8 <spi_sendbyte>
}
 580:	2b 9d 00 04 	lw ra,(sp+4)
 584:	37 9c 00 04 	addi sp,sp,4
 588:	c3 a0 00 00 	ret

0000058c <spi_lcd_invert>:
// ok, it's working as it should
void spi_lcd_invert()
{
 58c:	37 9c ff fc 	addi sp,sp,-4
 590:	5b 9d 00 04 	sw (sp+4),ra
	spi_sendbyte(INVERSE_MODE, 0);
 594:	34 01 00 0d 	mvi r1,13
 598:	34 02 00 00 	mvi r2,0
 59c:	fb ff ff cb 	calli 4c8 <spi_sendbyte>
}
 5a0:	2b 9d 00 04 	lw ra,(sp+4)
 5a4:	37 9c 00 04 	addi sp,sp,4
 5a8:	c3 a0 00 00 	ret

000005ac <spi_lcd_getx>:

uint8_t spi_lcd_getx()
{
	return spi0->x_pos;
 5ac:	78 01 00 00 	mvhi r1,0x0
 5b0:	38 21 07 e0 	ori r1,r1,0x7e0
 5b4:	28 21 00 00 	lw r1,(r1+0)
 5b8:	28 21 00 0c 	lw r1,(r1+12)
}
 5bc:	20 21 00 ff 	andi r1,r1,0xff
 5c0:	c3 a0 00 00 	ret

000005c4 <spi_lcd_gety>:

uint8_t spi_lcd_gety()
{
	return spi0->y_pos;
 5c4:	78 01 00 00 	mvhi r1,0x0
 5c8:	38 21 07 e0 	ori r1,r1,0x7e0
 5cc:	28 21 00 00 	lw r1,(r1+0)
 5d0:	28 21 00 10 	lw r1,(r1+16)
}
 5d4:	20 21 00 ff 	andi r1,r1,0xff
 5d8:	c3 a0 00 00 	ret
